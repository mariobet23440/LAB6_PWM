
Lab6_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f3  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000804  00000000  00000000  00000e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000541  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046e  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002aa  00000000  00000000  0000216e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  88:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup_adc>:

#include "LibreriaADC.h"

void setup_adc(void)
{
	ADMUX |= (1 << ADLAR) | (1 << REFS0);   // Ajuste a la izquierda (ADLAR), Referencia AVCC (REFS0)
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 66       	ori	r24, 0x60	; 96
  98:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADIE);    // Habilitar ADC y habilitar interrupción ADC
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 68       	ori	r24, 0x88	; 136
  a2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);  // Prescaler de 64
  a4:	80 81       	ld	r24, Z
  a6:	86 60       	ori	r24, 0x06	; 6
  a8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);					// Iniciar conversión
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <adc_set_channel>:
}

void adc_set_channel(unsigned char channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);  // Limpiar bits de canal y asignar nuevo canal
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	89 2b       	or	r24, r25
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <init_timer1>:

#include "LibreriaTimer1PWM.h"

void init_timer1(void)
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Fast PWM, OC1A y OC1B no invertido
  c2:	e0 e8       	ldi	r30, 0x80	; 128
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	82 6a       	ori	r24, 0xA2	; 162
  ca:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Prescaler de 8, Fast PWM
  cc:	e1 e8       	ldi	r30, 0x81	; 129
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8a 61       	ori	r24, 0x1A	; 26
  d4:	80 83       	st	Z, r24
	ICR1 = 39999;							// Establecer TOP a 39999 (Frecuencia de 50 Hz, 20ms)
  d6:	8f e3       	ldi	r24, 0x3F	; 63
  d8:	9c e9       	ldi	r25, 0x9C	; 156
  da:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  de:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << DDB1) | (1 << DDB2);		// Configurar PB1 y PB2 como salida (OC1A y OC1B)
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	86 60       	ori	r24, 0x06	; 6
  e6:	84 b9       	out	0x04, r24	; 4
  e8:	08 95       	ret

000000ea <TIMER1_PWM1_set_servo_PW>:

// Establecer ancho de pulso para PWM1
// La entrada value debe ser un número de 0 a 255
void TIMER1_PWM1_set_servo_PW(uint16_t value)
{
	uint16_t ticks = (4000/256) * value + 1000;	// Función empírica para giro de 180°
  ea:	2f e0       	ldi	r18, 0x0F	; 15
  ec:	ac 01       	movw	r20, r24
  ee:	24 9f       	mul	r18, r20
  f0:	c0 01       	movw	r24, r0
  f2:	25 9f       	mul	r18, r21
  f4:	90 0d       	add	r25, r0
  f6:	11 24       	eor	r1, r1
  f8:	88 51       	subi	r24, 0x18	; 24
  fa:	9c 4f       	sbci	r25, 0xFC	; 252
	if (ticks > ICR1) ticks = ICR1;			// Truncar ticks a ICR1 si se pasan del valor
  fc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 100:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	20 f4       	brcc	.+8      	; 0x112 <TIMER1_PWM1_set_servo_PW+0x28>
 10a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 10e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	OCR1A = ticks;							// Ajustar el valor de OCR1A
 112:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 116:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 11a:	08 95       	ret

0000011c <TIMER1_PWM2_set_servo_PW>:
}

void TIMER1_PWM2_set_servo_PW(uint16_t value)
{
	uint16_t ticks = (4000/256) * value + 1000;	// Función empírica para giro de 180°
 11c:	2f e0       	ldi	r18, 0x0F	; 15
 11e:	ac 01       	movw	r20, r24
 120:	24 9f       	mul	r18, r20
 122:	c0 01       	movw	r24, r0
 124:	25 9f       	mul	r18, r21
 126:	90 0d       	add	r25, r0
 128:	11 24       	eor	r1, r1
 12a:	88 51       	subi	r24, 0x18	; 24
 12c:	9c 4f       	sbci	r25, 0xFC	; 252
	if (ticks > ICR1) ticks = ICR1;			// Truncar ticks a ICR1 si se pasan del valor
 12e:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 132:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 136:	28 17       	cp	r18, r24
 138:	39 07       	cpc	r19, r25
 13a:	20 f4       	brcc	.+8      	; 0x144 <TIMER1_PWM2_set_servo_PW+0x28>
 13c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 140:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	OCR1B = ticks;							// Ajustar el valor de OCR1B
 144:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 148:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 14c:	08 95       	ret

0000014e <init_timer0>:
// FUNCIONES NO DE INTERRUPCIÓN
// Inicialización de TIMER 0 - Disparo de conversión
void init_timer0(void)
{
	// Operamos el temporizador en modo NORMAL
	TCCR0B |= (1 << CS01) | (1 << CS00);	// Prescaler de 64
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	83 60       	ori	r24, 0x03	; 3
 152:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 154:	16 bc       	out	0x26, r1	; 38
	
	// Habilitar interrupciones por overflow de TIMER0
	TIMSK0 |= (1 << TOIE0);
 156:	ee e6       	ldi	r30, 0x6E	; 110
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret

00000162 <init_timer2_manualpwm>:

// Inicialización de TIMER2 - PWM Manual
void init_timer2_manualpwm(void)
{
	// Modo Normal, TOP = 255
	TCCR2B |= (1 << CS21); // Prescaler de 8
 162:	e1 eb       	ldi	r30, 0xB1	; 177
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
	
	// Habilitación de interrupciones por overflow de timer y output compare match
	TIMSK2 |= (1 << OCIE2A) | (1 << TOIE2);
 16c:	e0 e7       	ldi	r30, 0x70	; 112
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	83 60       	ori	r24, 0x03	; 3
 174:	80 83       	st	Z, r24
	
	DDRD |= (1 << manual_pwm_pin); // Salida de PWM
 176:	8a b1       	in	r24, 0x0a	; 10
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	8a b9       	out	0x0a, r24	; 10
 17c:	08 95       	ret

0000017e <main>:
void timer2_set_PW(uint8_t value);

// MAINLOOP
int main(void)
{
	cli();
 17e:	f8 94       	cli
	DDRB |= (1 << DDB1) | (1 << DDB2) ;  // Configurar PB0 como salida
 180:	84 b1       	in	r24, 0x04	; 4
 182:	86 60       	ori	r24, 0x06	; 6
 184:	84 b9       	out	0x04, r24	; 4
	setup_adc();  // Configurar ADC
 186:	0e 94 48 00 	call	0x90	; 0x90 <setup_adc>
	init_timer0();
 18a:	0e 94 a7 00 	call	0x14e	; 0x14e <init_timer0>
	init_timer1();  // Inicializar Timer1 en modo Fast PWM
 18e:	0e 94 61 00 	call	0xc2	; 0xc2 <init_timer1>
	init_timer2_manualpwm();
 192:	0e 94 b1 00 	call	0x162	; 0x162 <init_timer2_manualpwm>
	sei();  // Habilitar interrupciones globales
 196:	78 94       	sei
 198:	ff cf       	rjmp	.-2      	; 0x198 <main+0x1a>

0000019a <timer2_set_PW>:
}

// Establecer ancho de pulso en TIMER2
void timer2_set_PW(uint8_t value)
{
	OCR2A = 255 - value;
 19a:	80 95       	com	r24
 19c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 1a0:	08 95       	ret

000001a2 <__vector_16>:
}

// RUTINAS DE INTERRUPCIÓN
// Timer0 Overflow - dispara conversión ADC
ISR(TIMER0_OVF_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8f 93       	push	r24
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	TCNT0 = 0; // Reiniciar contador
 1b2:	16 bc       	out	0x26, r1	; 38
	ADCSRA |= (1 << ADSC); // Iniciar conversión
 1b4:	ea e7       	ldi	r30, 0x7A	; 122
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 64       	ori	r24, 0x40	; 64
 1bc:	80 83       	st	Z, r24
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_21>:

// ADC listo - se ejecuta cuando termina la conversión
// Multiplexado de canales
ISR(ADC_vect)
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	uint8_t adc_value = ADCH; // Al usar ADLAR = 1, ADCH ya contiene los 8 bits más significativos
 1f0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	switch (current_channel)
 1f4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f8:	91 30       	cpi	r25, 0x01	; 1
 1fa:	69 f0       	breq	.+26     	; 0x216 <__vector_21+0x48>
 1fc:	18 f0       	brcs	.+6      	; 0x204 <__vector_21+0x36>
 1fe:	92 30       	cpi	r25, 0x02	; 2
 200:	99 f0       	breq	.+38     	; 0x228 <__vector_21+0x5a>
 202:	19 c0       	rjmp	.+50     	; 0x236 <__vector_21+0x68>
	{
		case 0:
		TIMER1_PWM1_set_servo_PW(adc_value); // PWM para canal 0 (OC1A)
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 75 00 	call	0xea	; 0xea <TIMER1_PWM1_set_servo_PW>
		current_channel = 1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		adc_set_channel(1);
 210:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_set_channel>
		break;
 214:	10 c0       	rjmp	.+32     	; 0x236 <__vector_21+0x68>

		case 1:
		TIMER1_PWM2_set_servo_PW(adc_value); // PWM para canal 1 (OC1B)
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 8e 00 	call	0x11c	; 0x11c <TIMER1_PWM2_set_servo_PW>
		current_channel = 2;
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		adc_set_channel(2);
 222:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_set_channel>
		break;
 226:	07 c0       	rjmp	.+14     	; 0x236 <__vector_21+0x68>
		
		case 2:
		timer2_set_PW(adc_value);
 228:	0e 94 cd 00 	call	0x19a	; 0x19a <timer2_set_PW>
		current_channel = 0;
 22c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		adc_set_channel(0);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_set_channel>
		break;
	}
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_9>:

// Cuando ocurra un overflow de TIMER2 - Apagar 
ISR(TIMER2_OVF_vect)
{
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	8f 93       	push	r24
	uint8_t temp = PIND;
 264:	89 b1       	in	r24, 0x09	; 9
	temp |= (1 << manual_pwm_pin);
 266:	88 60       	ori	r24, 0x08	; 8
	PORTD = temp;
 268:	8b b9       	out	0x0b, r24	; 11
}
 26a:	8f 91       	pop	r24
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <__vector_7>:

// Cuando ocurra un Output Compare Match - Encender
ISR(TIMER2_COMPA_vect)
{
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
	uint8_t temp = PIND;
 284:	99 b1       	in	r25, 0x09	; 9
	temp = temp ^ (1 << manual_pwm_pin);
 286:	88 e0       	ldi	r24, 0x08	; 8
 288:	89 27       	eor	r24, r25
	PORTD = temp;
 28a:	8b b9       	out	0x0b, r24	; 11
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
