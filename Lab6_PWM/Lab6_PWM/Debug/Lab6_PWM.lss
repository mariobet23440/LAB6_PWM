
Lab6_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a63  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000857  00000000  00000000  00000e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005be  00000000  00000000  000016d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046f  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b2  00000000  00000000  0000227b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000242d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  88:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup_adc>:

#include "LibreriaADC.h"

void setup_adc(void)
{
	ADMUX |= (1 << ADLAR) | (1 << REFS0);  // Ajuste a la izquierda (ADLAR), Referencia AVCC (REFS0)
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 66       	ori	r24, 0x60	; 96
  98:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADIE);    // Habilitar ADC y habilitar interrupción ADC
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 68       	ori	r24, 0x88	; 136
  a2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);  // Prescaler de 64
  a4:	80 81       	ld	r24, Z
  a6:	86 60       	ori	r24, 0x06	; 6
  a8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);					// Iniciar conversión
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <adc_set_channel>:
}

void adc_set_channel(unsigned char channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);  // Limpiar bits de canal y asignar nuevo canal
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	89 2b       	or	r24, r25
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <init_timer1>:

#include "LibreriaTimer1PWM.h"

void init_timer1(void)
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Fast PWM, OC1A y OC1B no invertido
  c2:	e0 e8       	ldi	r30, 0x80	; 128
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	82 6a       	ori	r24, 0xA2	; 162
  ca:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Prescaler de 8, Fast PWM
  cc:	e1 e8       	ldi	r30, 0x81	; 129
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8a 61       	ori	r24, 0x1A	; 26
  d4:	80 83       	st	Z, r24
	ICR1 = 39999;							// Establecer TOP a 39999 (Frecuencia de 50 Hz, 20ms)
  d6:	8f e3       	ldi	r24, 0x3F	; 63
  d8:	9c e9       	ldi	r25, 0x9C	; 156
  da:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  de:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << DDB1) | (1 << DDB2);		// Configurar PB1 como salida (OC1A y OC1B)
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	86 60       	ori	r24, 0x06	; 6
  e6:	84 b9       	out	0x04, r24	; 4
  e8:	08 95       	ret

000000ea <TIMER1_PWM1_set_servo_PW>:

// Establecer ancho de pulso para PWM1
// La entrada value debe ser un número de 0 a 255
void TIMER1_PWM1_set_servo_PW(uint16_t value)
{
	uint16_t ticks = (4000/256) * value + 1000;	// Función empírica para giro de 180°
  ea:	2f e0       	ldi	r18, 0x0F	; 15
  ec:	ac 01       	movw	r20, r24
  ee:	24 9f       	mul	r18, r20
  f0:	c0 01       	movw	r24, r0
  f2:	25 9f       	mul	r18, r21
  f4:	90 0d       	add	r25, r0
  f6:	11 24       	eor	r1, r1
  f8:	88 51       	subi	r24, 0x18	; 24
  fa:	9c 4f       	sbci	r25, 0xFC	; 252
	if (ticks > ICR1) ticks = ICR1;			// Truncar ticks a ICR1 si se pasan del valor
  fc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 100:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	20 f4       	brcc	.+8      	; 0x112 <TIMER1_PWM1_set_servo_PW+0x28>
 10a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 10e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	OCR1A = ticks;							// Ajustar el valor de OCR1A
 112:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 116:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 11a:	08 95       	ret

0000011c <TIMER1_PWM2_set_servo_PW>:
}

void TIMER1_PWM2_set_servo_PW(uint16_t value)
{
	uint16_t ticks = (4000/256) * value + 1000;	// Función empírica para giro de 180°
 11c:	2f e0       	ldi	r18, 0x0F	; 15
 11e:	ac 01       	movw	r20, r24
 120:	24 9f       	mul	r18, r20
 122:	c0 01       	movw	r24, r0
 124:	25 9f       	mul	r18, r21
 126:	90 0d       	add	r25, r0
 128:	11 24       	eor	r1, r1
 12a:	88 51       	subi	r24, 0x18	; 24
 12c:	9c 4f       	sbci	r25, 0xFC	; 252
	if (ticks > ICR1) ticks = ICR1;			// Truncar ticks a ICR1 si se pasan del valor
 12e:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 132:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 136:	28 17       	cp	r18, r24
 138:	39 07       	cpc	r19, r25
 13a:	20 f4       	brcc	.+8      	; 0x144 <TIMER1_PWM2_set_servo_PW+0x28>
 13c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 140:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	OCR1B = ticks;							// Ajustar el valor de OCR1B
 144:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 148:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 14c:	08 95       	ret

0000014e <init_timer2>:
#include "LibreriaTimer2PWM.h"

void init_timer2(void)
{
	// Modo Fast PWM, TOP = 255, salida no invertida en OC2A y OC2B
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
 14e:	e0 eb       	ldi	r30, 0xB0	; 176
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	83 6a       	ori	r24, 0xA3	; 163
 156:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS21); // Prescaler de 8
 158:	e1 eb       	ldi	r30, 0xB1	; 177
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	80 83       	st	Z, r24

	DDRB |= (1 << DDB3); // PB3 como salida (OC2A)
 162:	84 b1       	in	r24, 0x04	; 4
 164:	88 60       	ori	r24, 0x08	; 8
 166:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD3); // PD3 como salida (OC2B)
 168:	8a b1       	in	r24, 0x0a	; 10
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	8a b9       	out	0x0a, r24	; 10
 16e:	08 95       	ret

00000170 <TIMER2_PWM1_set_duty>:
}

// Establecer duty cycle para OC2A (PWM1), valor de 0 a 255
void TIMER2_PWM1_set_duty(uint8_t value)
{
	OCR2A = value;
 170:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 174:	08 95       	ret

00000176 <TIMER2_PWM2_set_duty>:
}

// Establecer duty cycle para OC2B (PWM2), valor de 0 a 255
void TIMER2_PWM2_set_duty(uint8_t value)
{
	OCR2B = value;
 176:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 17a:	08 95       	ret

0000017c <init_timer0>:

// TIMER 0 - Disparo de conversión
void init_timer0(void)
{
	// Operamos el temporizador en modo NORMAL
	TCCR0B |= (1 << CS01) | (1 << CS00);	// Prescaler de 64
 17c:	85 b5       	in	r24, 0x25	; 37
 17e:	83 60       	ori	r24, 0x03	; 3
 180:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 182:	16 bc       	out	0x26, r1	; 38
	
	// Habilitar interrupciones por overflow de TIMER0
	TIMSK0 |= (1 << TOIE0);
 184:	ee e6       	ldi	r30, 0x6E	; 110
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	80 83       	st	Z, r24
 18e:	08 95       	ret

00000190 <main>:
}

int main(void)
{
	cli();
 190:	f8 94       	cli
	DDRB |= (1 << DDB1) | (1 << DDB2) ;  // Configurar PB0 como salida
 192:	84 b1       	in	r24, 0x04	; 4
 194:	86 60       	ori	r24, 0x06	; 6
 196:	84 b9       	out	0x04, r24	; 4
	setup_adc();  // Configurar ADC
 198:	0e 94 48 00 	call	0x90	; 0x90 <setup_adc>
	init_timer0();
 19c:	0e 94 be 00 	call	0x17c	; 0x17c <init_timer0>
	init_timer1();  // Inicializar Timer1 en modo Fast PWM
 1a0:	0e 94 61 00 	call	0xc2	; 0xc2 <init_timer1>
	init_timer2();
 1a4:	0e 94 a7 00 	call	0x14e	; 0x14e <init_timer2>
	sei();  // Habilitar interrupciones globales
 1a8:	78 94       	sei
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <main+0x1a>

000001ac <__vector_16>:
	return 0;
}

// Timer0 Overflow - dispara conversión ADC
ISR(TIMER0_OVF_vect)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	8f 93       	push	r24
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
	TCNT0 = 0; // Reiniciar contador
 1bc:	16 bc       	out	0x26, r1	; 38
	ADCSRA |= (1 << ADSC); // Iniciar conversión
 1be:	ea e7       	ldi	r30, 0x7A	; 122
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	80 83       	st	Z, r24
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_21>:

// ADC listo - se ejecuta cuando termina la conversión
// Multiplexado de canales
ISR(ADC_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	cf 93       	push	r28
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	uint8_t adc_value = ADCH; // Al usar ADLAR = 1, ADCH ya contiene los 8 bits más significativos
 1fc:	c0 91 79 00 	lds	r28, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	switch (current_channel)
 200:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	71 f0       	breq	.+28     	; 0x224 <__vector_21+0x4c>
 208:	18 f0       	brcs	.+6      	; 0x210 <__vector_21+0x38>
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	a9 f0       	breq	.+42     	; 0x238 <__vector_21+0x60>
 20e:	1f c0       	rjmp	.+62     	; 0x24e <__vector_21+0x76>
	{
		case 0:
		TIMER1_PWM1_set_servo_PW(adc_value); // PWM para canal 0 (OC1A)
 210:	8c 2f       	mov	r24, r28
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 75 00 	call	0xea	; 0xea <TIMER1_PWM1_set_servo_PW>
		current_channel = 1;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		adc_set_channel(1);
 21e:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_set_channel>
		break;
 222:	15 c0       	rjmp	.+42     	; 0x24e <__vector_21+0x76>

		case 1:
		TIMER1_PWM2_set_servo_PW(adc_value); // PWM para canal 1 (OC1B)
 224:	8c 2f       	mov	r24, r28
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 8e 00 	call	0x11c	; 0x11c <TIMER1_PWM2_set_servo_PW>
		current_channel = 2;
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		adc_set_channel(2);
 232:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_set_channel>
		break;
 236:	0b c0       	rjmp	.+22     	; 0x24e <__vector_21+0x76>
		
		case 2:
		TIMER2_PWM2_set_duty(adc_value); // PWM para canal 2 (OC2B)
 238:	8c 2f       	mov	r24, r28
 23a:	0e 94 bb 00 	call	0x176	; 0x176 <TIMER2_PWM2_set_duty>
		TIMER2_PWM1_set_duty(adc_value); // PWM para canal 2 (OC1B)
 23e:	8c 2f       	mov	r24, r28
 240:	0e 94 b8 00 	call	0x170	; 0x170 <TIMER2_PWM1_set_duty>
		current_channel = 0;
 244:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		adc_set_channel(0);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_set_channel>
		break;
	}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	cf 91       	pop	r28
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
